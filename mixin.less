// Mixin
.cssreset(){
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  vertical-align: baseline;
  background: transparent;
}

.border-radius (@radius: 5px) {
  -webkit-border-radius: @radius;
  -moz-border-radius:    @radius;
  border-radius:         @radius;
}

.transition (@transition) {
  -webkit-transition: @transition;  
  -moz-transition:    @transition;
  -ms-transition:     @transition; 
  -o-transition:      @transition;  
}

// PX to EM
.font-size(@target: @font-size-base, @default: @font-size-base) {
  font-size: round((@target / @default), 3) + 0em;
}

// Usage
// .px2em(~"margin", 20px 30px 20px)
// .px2em(~"font-size", 20px)
// .px2em(~"font-size", 20px, 18px)
.px2em(@property, @target: @font-size-base, @default: @font-size-base) {
  @n: length(@target);
  .put(@i) when (extract(@target, @i) = auto), (extract(@target, @i) = 0) {
    @item: extract(@target, @i);
    .put((@i + 1), ~"@{item}");
  }
  .put(@i) when (default()) {
    @item: unit(extract(@target, @i) / @default, em);
    .put((@i + 1), ~"@{item}");
  }
  .put(@i, @item) when (extract(@target, @i) = auto), (extract(@target, @i) = 0) and (@i <= @n) {
    @nextItem: extract(@target, @i);
    .put((@i + 1), ~"@{item} @{nextItem}");
  }
  .put(@i, @item) when (default()) and (@i <= @n) {
    @nextItem: unit(extract(@target, @i) / @default, em);
    .put((@i + 1), ~"@{item} @{nextItem}");
  }
  .put(@i, @item) when (@i > @n) {
    @{property}: @item;
  }
  .put(1);
}

// Sizing shortcuts
.size(@width, @height: @width) {
  width: @width;
  height: @height;
}

// Center-align a block level element
.center-block() {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

// Usage
// .border-radius() - default is 50%
// .border-radius(20px) - all border is 20px
// .border-radius(5px null 20px) - top left and bottom left border
// .border-radius(null null 20px) - bottom left border
.border-radius(@radius: 50%) {
  @n: length(@radius);
  @position: top-left, top-right, bottom-left, bottom-right;
  .put(@i) when (@n = 1) and (@i <= length(@position)) {
    @str: extract(@position, @i);
    border-@{str}-radius: @radius;
    .put(@i + 1);
  }
  .put(@i) when (@n > 1)  and (@i <= length(@position)) and (@i <= @n){
    @r: extract(@radius, @i);
    .check() when not (@r = null) {
      @str: extract(@position, @i);
      border-@{str}-radius: @r;
    }
    .check();
    .put(@i + 1);
  }
  .put(1);
}